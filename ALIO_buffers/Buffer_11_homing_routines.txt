
! ROUTINE REV - 038 - custom for two z's
!
! DEFINE HOMING VARIABLES			
GLOBAL REAL AXIS_INDEX, AXIS_QTY, GANT_ORTHO, SETSPEEDVARS, SYSTYPE, XYCOMP, ZCOMP, UpdateUPOS
GLOBAL REAL AXIS_HOME(8), AXIS_LIMITS(8), A_N(8), COMMUT_EXCITATION(8), COMMUT_ON(8), GANT_AXES(8)
GLOBAL REAL HARDLIMITS(8), HOME_DIGITAL(8), HOME_DIR(8), HOME_FLAG(8), LSOFTLIMIT(8), RSOFTLIMIT(8), STD_AXES(3), VELOCITY(8)
GLOBAL REAL H_O(8)

GLOBAL REAL StepX(11), LdaX(3)(11), StrX(3)(11), FlatX(3)(11), XStepY(3), YawX(11)
GLOBAL REAL StepY(11), LdaY(3)(11), StrY(3)(11), FlatY(3)(11), YStepX(3), YawY(11)
GLOBAL REAL StepZ(11), LdaZ(11)
GLOBAL REAL ErrorCompXAxis, ErrorCompYAxis, ErrorCompZAxis
GLOBAL REAL I_X1, I_X2, I_Y, I_Z, T_1

GLOBAL REAL ErrorCompZ2Axis, StepZ2(11), LdaZ2(11), I_Z2, FlatX2(3)(11), FlatY2(3)(11)
!!!!!!!!!!!!!!!!!!!!!!!!! MODIFY THESE !!!!!!!!!!!!!!!!!!!!!!!!!!
! SET HOMING CONSTANTS
! AXIS NAMES AND CONSTANTS BEYOND THE "AXIS_QTY" VALUE WILL BE IGNORED
! CURRENT MAXIMUM AXIS_QTY IS 8

! GLOBAL CONSTANTS
AXIS_QTY=6      	! DEFINE THE NUMBER OF AXIS (eg, XY SYSTEM = 2)
XYCOMP=1			! DOES THE XY INCLUDE A COMPENSATION TABLE (0=NO; 1=LdaX, LdaY, StrX, StrY, T_1, YawX, YawY)
ZCOMP=2				! DOES THE Z INCLUDE A COMPENSATION TABLE (0=NO, 1=LdaZ, 2=LdaZ, FlatX, FlatY)
SETSPEEDVARS=0  	! SET THE SPEED VARIABLES AT THE END OF HOMING? (0=NO, 1=YES)
SYSTYPE=2			! SET WHICH SYSTEM IS BEING HOMED (0=STANDARD SYSTEM, 1=HYBRID HEXAPOD, 2=GANTRY, 3=GANTRY HYBRID HEXAPOD)

! AXIS ASSIGNMENTS FOR ERROR COMPENSATION (THESE NUMBERS ARE THE INDEX NUMBER OF A_N)
! STANDARD (SYSTYPE=0)
STD_AXES(0)=0		! SET THE BOTTOM AXIS		(eg, X-LINEAR)
STD_AXES(1)=1		! SET THE TOP AXIS			(eg, Y-LINEAR)
STD_AXES(2)=2		! SET THE ORTHOGONAL AXIS	(eg, Z-LINEAR)

! GANTRY (SYSTYPE=2)
GANT_AXES(0)=0		! SET THE MASTER GANTRY AXIS		(eg, X-LINEAR IN GANTRY MODE)
GANT_AXES(1)=1		! SET THE SLAVE GANTRY AXIS			(eg, X-YAW IN GANTRY MODE)
GANT_AXES(2)=2		! SET THE CROSS GANTRY AXIS			(eg, Y-LINEAR)
GANT_AXES(3)=3		! SET THE ORTHOGONAL GANTRY AXIS	(eg, Z-LINEAR)
GANT_AXES(4)=4		! SET THE 2nd ORTHOGONAL GANTRY AXIS	(eg, Z-LINEAR)
! GANTRY HOME OFFSETS ARE SPECIAL
!	- H_O(GANT_AXES(0)) IS THE X-LINEAR OFFSET (IN MM)
!	- H_O(GANT_AXES(1)) IS THE MM OFFSET FOR SETTING ORTHO (IE, DIFFERENCE BETWEEN THE INDICES) 

! AXIS 0 CONSTANTS
! SN: XXXXXX
A_N(0)=0          ! DEFINE THE AXIS NAME (0,1,X,A,ETC) INPUT "N" FOR NO AXIS
AXIS_LIMITS(0)=1        ! AXIS LIMIT CONFIG (0=ROTARY WITHOUT LIMITS, 1=LINEAR WITH LIMITS, 2=LINEAR WITHOUT LIMITS (USES THE HARD STOPS))
HOME_DIGITAL(0)=0	    ! HOME DIGITAL FOR AXIS (0=ANALOG, 1=DIGITAL)
HOME_DIR(0)=1		    ! HOME DIRECTION FOR AXIS (-1 OR 1)
H_O(0)= 0 !-1.5		! HOME OFFSET FOR AXIS
VELOCITY(0)=30	        ! HOMING VELOCITY FOR AXIS (MUST BE A LOW VELOCITY IF AXIS IS LINEAR WITHOUT LIMITS)
COMMUT_ON(0)=1          ! COMMUTE (0=NO, 1=YES)
COMMUT_EXCITATION(0)=6 ! EXCITATION CURRENT PERCENT (SET COMMUTATION CURRENT TO MAX. 15% NTM CURRENT)
AXIS_HOME(0)=1          ! SHOULD THE AXIS BE HOMED? (0=NO, 1=YES)
HARDLIMITS(0)=0			! SHOULD HARD LIMTS BE USED? (0=SOFT LIMITS, 1=HARD LIMITS)
RSOFTLIMIT(0)=500.2		! IF HARDLIMITS(x)=0, THEN DEFINE THE RIGHT SOFT LIMIT.
LSOFTLIMIT(0)=-500.2	! IF HARDLIMITS(x)=0, THEN DEFINE THE LEFT SOFT LIMIT.

! AXIS 1 CONSTANTS
! SN: XXXXXX
A_N(1)=2          ! DEFINE THE AXIS NAME (0,1,X,A,ETC) INPUT "N" FOR NO AXIS
AXIS_LIMITS(1)=1        ! AXIS LIMIT CONFIG (0=ROTARY WITHOUT LIMITS, 1=LINEAR WITH LIMITS, 2=LINEAR WITHOUT LIMITS (USES THE HARD STOPS))
HOME_DIGITAL(1)=0	    ! HOME DIGITAL FOR AXIS (0=ANALOG, 1=DIGITAL)
HOME_DIR(1)=1		    ! HOME DIRECTION FOR AXIS (-1 OR 1)
H_O(1)=0!2.287867 		! HOME OFFSET FOR AXIS
VELOCITY(1)=30	        ! HOMING VELOCITY FOR AXIS (MUST BE A LOW VELOCITY IF AXIS IS LINEAR WITHOUT LIMITS)
COMMUT_ON(1)=1          ! COMMUTE (0=NO, 1=YES)
COMMUT_EXCITATION(1)=6 ! EXCITATION CURRENT PERCENT (SET COMMUTATION CURRENT TO MAX. 15% NTM CURRENT)
AXIS_HOME(1)=1          ! SHOULD THE AXIS BE HOMED? (0=NO, 1=YES)
HARDLIMITS(1)=0		! SHOULD HARD LIMTS BE USED? (0=SOFT LIMITS, 1=HARD LIMITS)
RSOFTLIMIT(1)=500.2		! IF HARDLIMITS(x)=0, THEN DEFINE THE RIGHT SOFT LIMIT.
LSOFTLIMIT(1)=-500.2	! IF HARDLIMITS(x)=0, THEN DEFINE THE LEFT SOFT LIMIT.

! AXIS 2 CONSTANTS
! SN: XXXXXX
A_N(2)=1          ! DEFINE THE AXIS NAME (0,1,X,A,ETC) INPUT "N" FOR NO AXIS
AXIS_LIMITS(2)=1        ! AXIS LIMIT CONFIG (0=ROTARY WITHOUT LIMITS, 1=LINEAR WITH LIMITS, 2=LINEAR WITHOUT LIMITS (USES THE HARD STOPS))
HOME_DIGITAL(2)=0	    ! HOME DIGITAL FOR AXIS (0=ANALOG, 1=DIGITAL)
HOME_DIR(2)=1		    ! HOME DIRECTION FOR AXIS (-1 OR 1)
H_O(2)=0		! HOME OFFSET FOR AXIS
VELOCITY(2)=50	        ! HOMING VELOCITY FOR AXIS (MUST BE A LOW VELOCITY IF AXIS IS LINEAR WITHOUT LIMITS)
COMMUT_ON(2)=1          ! COMMUTE (0=NO, 1=YES)
COMMUT_EXCITATION(2)=7 ! EXCITATION CURRENT PERCENT (SET COMMUTATION CURRENT TO MAX. 15% NTM CURRENT)
AXIS_HOME(2)=1         ! SHOULD THE AXIS BE HOMED? (0=NO, 1=YES)
HARDLIMITS(2)=0			! SHOULD HARD LIMTS BE USED? (0=SOFT LIMITS, 1=HARD LIMITS)
RSOFTLIMIT(2)=520.5		! IF HARDLIMITS(x)=0, THEN DEFINE THE RIGHT SOFT LIMIT.
LSOFTLIMIT(2)=-520.5	! IF HARDLIMITS(x)=0, THEN DEFINE THE LEFT SOFT LIMIT.

! AXIS 3 CONSTANTS
! SN: XXXXXX
A_N(3)=4          ! DEFINE THE AXIS NAME (0,1,X,A,ETC) INPUT "N" FOR NO AXIS
AXIS_LIMITS(3)=1        ! AXIS LIMIT CONFIG (0=ROTARY WITHOUT LIMITS, 1=LINEAR WITH LIMITS, 2=LINEAR WITHOUT LIMITS (USES THE HARD STOPS))
HOME_DIGITAL(3)=0	    ! HOME DIGITAL FOR AXIS (0=ANALOG, 1=DIGITAL)
HOME_DIR(3)=1		    ! HOME DIRECTION FOR AXIS (-1 OR 1)
H_O(3)=0		! HOME OFFSET FOR AXIS
VELOCITY(3)=10	        ! HOMING VELOCITY FOR AXIS (MUST BE A LOW VELOCITY IF AXIS IS LINEAR WITHOUT LIMITS)
COMMUT_ON(3)=1          ! COMMUTE (0=NO, 1=YES)
COMMUT_EXCITATION(3)=4 ! EXCITATION CURRENT PERCENT (SET COMMUTATION CURRENT TO MAX. 15% NTM CURRENT)
AXIS_HOME(3)=1          ! SHOULD THE AXIS BE HOMED? (0=NO, 1=YES)
HARDLIMITS(3)=0			! SHOULD HARD LIMTS BE USED? (0=SOFT LIMITS, 1=HARD LIMITS)
RSOFTLIMIT(3)=101		! IF HARDLIMITS(x)=0, THEN DEFINE THE RIGHT SOFT LIMIT.
LSOFTLIMIT(3)=-101	! IF HARDLIMITS(x)=0, THEN DEFINE THE LEFT SOFT LIMIT.

! AXIS 4 CONSTANTS
! SN: XXXXXX
A_N(4)=5         ! DEFINE THE AXIS NAME (0,1,X,A,ETC) INPUT "N" FOR NO AXIS
AXIS_LIMITS(4)=1        ! AXIS LIMIT CONFIG (0=ROTARY WITHOUT LIMITS, 1=LINEAR WITH LIMITS, 2=LINEAR WITHOUT LIMITS (USES THE HARD STOPS))
HOME_DIGITAL(4)=0	    ! HOME DIGITAL FOR AXIS (0=ANALOG, 1=DIGITAL)
HOME_DIR(4)=1		    ! HOME DIRECTION FOR AXIS (-1 OR 1)
H_O(4)=0		! HOME OFFSET FOR AXIS
VELOCITY(4)=10	        ! HOMING VELOCITY FOR AXIS (MUST BE A LOW VELOCITY IF AXIS IS LINEAR WITHOUT LIMITS)
COMMUT_ON(4)=1          ! COMMUTE (0=NO, 1=YES)
COMMUT_EXCITATION(4)=4 ! EXCITATION CURRENT PERCENT (SET COMMUTATION CURRENT TO MAX. 15% NTM CURRENT)
AXIS_HOME(4)=1         ! SHOULD THE AXIS BE HOMED? (0=NO, 1=YES)
HARDLIMITS(4)=0			! SHOULD HARD LIMTS BE USED? (0=SOFT LIMITS, 1=HARD LIMITS)
RSOFTLIMIT(4)=101		! IF HARDLIMITS(x)=0, THEN DEFINE THE RIGHT SOFT LIMIT.
LSOFTLIMIT(4)=-101	! IF HARDLIMITS(x)=0, THEN DEFINE THE LEFT SOFT LIMIT.

! AXIS 5 CONSTANTS
! SN: XXXXXX
A_N(5)=6         	! DEFINE THE AXIS NAME (0,1,X,A,ETC) INPUT "N" FOR NO AXIS
AXIS_LIMITS(5)=0        ! AXIS LIMIT CONFIG (0=ROTARY WITHOUT LIMITS, 1=LINEAR WITH LIMITS, 2=LINEAR WITHOUT LIMITS (USES THE HARD STOPS))
HOME_DIGITAL(5)=0	    ! HOME DIGITAL FOR AXIS (0=ANALOG, 1=DIGITAL)
HOME_DIR(5)=1		    ! HOME DIRECTION FOR AXIS (-1 OR 1)
H_O(5)=0		! HOME OFFSET FOR AXIS
VELOCITY(5)=45	        ! HOMING VELOCITY FOR AXIS (MUST BE A LOW VELOCITY IF AXIS IS LINEAR WITHOUT LIMITS)
COMMUT_ON(5)=1          ! COMMUTE (0=NO, 1=YES)
COMMUT_EXCITATION(5)=5 ! EXCITATION CURRENT PERCENT (SET COMMUTATION CURRENT TO MAX. 15% NTM CURRENT)
AXIS_HOME(5)=1          ! SHOULD THE AXIS BE HOMED? (0=NO, 1=YES)
HARDLIMITS(5)=1			! SHOULD HARD LIMTS BE USED? (0=SOFT LIMITS, 1=HARD LIMITS)
RSOFTLIMIT(5)=99999		! IF HARDLIMITS(x)=0, THEN DEFINE THE RIGHT SOFT LIMIT.
LSOFTLIMIT(5)=-99999	! IF HARDLIMITS(x)=0, THEN DEFINE THE LEFT SOFT LIMIT.

! AXIS 6 CONSTANTS
! SN: XXXXXX
A_N(6)=6         	! DEFINE THE AXIS NAME (0,1,X,A,ETC) INPUT "N" FOR NO AXIS
AXIS_LIMITS(6)=1        ! AXIS LIMIT CONFIG (0=ROTARY WITHOUT LIMITS, 1=LINEAR WITH LIMITS, 2=LINEAR WITHOUT LIMITS (USES THE HARD STOPS))
HOME_DIGITAL(6)=0	    ! HOME DIGITAL FOR AXIS (0=ANALOG, 1=DIGITAL)
HOME_DIR(6)=1		    ! HOME DIRECTION FOR AXIS (-1 OR 1)
H_O(6)=0		! HOME OFFSET FOR AXIS
VELOCITY(6)=25	        ! HOMING VELOCITY FOR AXIS (MUST BE A LOW VELOCITY IF AXIS IS LINEAR WITHOUT LIMITS)
COMMUT_ON(6)=1          ! COMMUTE (0=NO, 1=YES)
COMMUT_EXCITATION(6)=10 ! EXCITATION CURRENT PERCENT (SET COMMUTATION CURRENT TO MAX. 15% NTM CURRENT)
AXIS_HOME(6)=1          ! SHOULD THE AXIS BE HOMED? (0=NO, 1=YES)
HARDLIMITS(6)=1			! SHOULD HARD LIMTS BE USED? (0=SOFT LIMITS, 1=HARD LIMITS)
RSOFTLIMIT(6)=99999		! IF HARDLIMITS(x)=0, THEN DEFINE THE RIGHT SOFT LIMIT.
LSOFTLIMIT(6)=-99999	! IF HARDLIMITS(x)=0, THEN DEFINE THE LEFT SOFT LIMIT.

! AXIS 7 CONSTANTS
! SN: XXXXXX
A_N(7)=7         	! DEFINE THE AXIS NAME (0,1,X,A,ETC) INPUT "N" FOR NO AXIS
AXIS_LIMITS(7)=1        ! AXIS LIMIT CONFIG (0=ROTARY WITHOUT LIMITS, 1=LINEAR WITH LIMITS, 2=LINEAR WITHOUT LIMITS (USES THE HARD STOPS))
HOME_DIGITAL(7)=0	    ! HOME DIGITAL FOR AXIS (0=ANALOG, 1=DIGITAL)
HOME_DIR(7)=1		    ! HOME DIRECTION FOR AXIS (-1 OR 1)
H_O(7)=0		! HOME OFFSET FOR AXIS
VELOCITY(7)=10	        ! HOMING VELOCITY FOR AXIS (MUST BE A LOW VELOCITY IF AXIS IS LINEAR WITHOUT LIMITS)
COMMUT_ON(7)=1          ! COMMUTE (0=NO, 1=YES)
COMMUT_EXCITATION(7)=10 ! EXCITATION CURRENT PERCENT (SET COMMUTATION CURRENT TO MAX. 15% NTM CURRENT)
AXIS_HOME(7)=1          ! SHOULD THE AXIS BE HOMED? (0=NO, 1=YES)
HARDLIMITS(7)=1			! SHOULD HARD LIMTS BE USED? (0=SOFT LIMITS, 1=HARD LIMITS)
RSOFTLIMIT(7)=99999		! IF HARDLIMITS(x)=0, THEN DEFINE THE RIGHT SOFT LIMIT.
LSOFTLIMIT(7)=-99999	! IF HARDLIMITS(x)=0, THEN DEFINE THE LEFT SOFT LIMIT.

!!!!!!!!!!!!!!!!!!!!!! END MODIFY SECTION !!!!!!!!!!!!!!!!!!!!!!!


HomeXY:
	! GANTRY HOMING
	! - Commutate the motor on axis 0
	! - Move axes 0 and 2 to the left/right end of travel. 
	! - Move back toward the encoder index.
	! - Once index on axis 0 is seen, halt
	! - Set the axis 0 origin to the position of index.
	! - Move axes 0 and 2 toward the left/right end of travel 10mm
	! - Move back toward the encoder index.
	! - Once index on axis 2 is seen, halt
	! - Set the axis 2 origin to the position of index.
	! - Move to the origin.
	CALL GantHome
	PTP/em (A_N(GANT_AXES(0)),A_N(GANT_AXES(1))),0,0	! MOVE GANTRY AXES TO ZERO
RET

HomeZ1:

! STANDARD HOMING
	! HOMES EACH AXIS THROUGH THE FOLLOWING SEQUENCE (Rotary sequence differs, see note below)
	! - Commutate the motor.
	! - Move to the left/right end of travel. 
	! - Move toward the encoder index.
	! - Once index is seen, halt
	! - Set the axis origin to the position of index.
	! - Move to the origin.
	AXIS_INDEX=4
		! IF THE AXIS IS ONE OF THE GANTRY AXES, THEN SKIP IT
			CALL StdHome
			CALL SetLimitMasking		! SETS THE SOFT OR HARD LIMITS
			PTP/e (A_N(AXIS_INDEX)), 0	! MOVE TO ZERO
RET


HomeZ2:

! STANDARD HOMING
	! HOMES EACH AXIS THROUGH THE FOLLOWING SEQUENCE (Rotary sequence differs, see note below)
	! - Commutate the motor.
	! - Move to the left/right end of travel. 
	! - Move toward the encoder index.
	! - Once index is seen, halt
	! - Set the axis origin to the position of index.
	! - Move to the origin.
	AXIS_INDEX=5
		! IF THE AXIS IS ONE OF THE GANTRY AXES, THEN SKIP IT
			CALL StdHome
			CALL SetLimitMasking		! SETS THE SOFT OR HARD LIMITS
			PTP/e (A_N(AXIS_INDEX)), 0	! MOVE TO ZERO
RET


HomeU:

! STANDARD HOMING
	! HOMES EACH AXIS THROUGH THE FOLLOWING SEQUENCE (Rotary sequence differs, see note below)
	! - Commutate the motor.
	! - Move to the left/right end of travel. 
	! - Move toward the encoder index.
	! - Once index is seen, halt
	! - Set the axis origin to the position of index.
	! - Move to the origin.
	AXIS_INDEX=6
		! IF THE AXIS IS ONE OF THE GANTRY AXES, THEN SKIP IT
			CALL StdHome
			CALL SetLimitMasking		! SETS THE SOFT OR HARD LIMITS
			PTP/e (A_N(AXIS_INDEX)), 0	! MOVE TO ZERO
RET



RotNoLimHome:
	! HOMING ROUTINE FOR ROTARY WITHOUT LIMITS
	IF(HOME_DIR(AXIS_INDEX))=1 	! IF AXIS DIRECTION IS 1
		PTP/er (A_N(AXIS_INDEX)), -10
		WAIT 100
		JOG (A_N(AXIS_INDEX)),+	! MOVE IN THE POSITIVE DIRECTION
	END
	IF(HOME_DIR(AXIS_INDEX))=-1 	! IF AXIS DIRECTION IS -1
		PTP/er (A_N(AXIS_INDEX)), 10
		WAIT 100
		JOG (A_N(AXIS_INDEX)),-	! MOVE IN THE NEGATIVE DIRECTION
	END
RET

LinWithLimHome:
	! HOMING ROUTINE FOR LINEAR WITH LIMITS				
	IF(HOME_DIR(AXIS_INDEX))=-1 				! IF AXIS DIRECTION IS -1
		JOG (A_N(AXIS_INDEX)),-           	! MOVE TO THE LEFT LIMIT SWITCH 			
		TILL FAULT(A_N(AXIS_INDEX)).#LL, 60000   	! WAIT FOR THE LEFT LIMIT SWITCH ACTIVATION			
		HALT (A_N(AXIS_INDEX))				
		WAIT 50				
		JOG (A_N(AXIS_INDEX)),+           	! MOVE TO THE POSITIVE END LOOKING FOR THE ENCODER INDEX			
		TILL ^FAULT(A_N(AXIS_INDEX)).#LL, 60000  	! WAIT TO PROCEED UNTIL LEFT LIMIT SWITHC HAS RELEASED							
	END				
	! END IF HOMING IN NEGATIVE DIRECTION				
	IF(HOME_DIR(AXIS_INDEX))=1 				! IF AXIS DIRECTION IS 1
		JOG (A_N(AXIS_INDEX)),+           	! MOVE TO THE RIGHT LIMIT SWITCH 			
		TILL FAULT(A_N(AXIS_INDEX)).#RL, 60000   	! WAIT FOR THE RIGHT LIMIT SWITCH ACTIVATION			
		HALT (A_N(AXIS_INDEX))				
		WAIT 50				
		JOG (A_N(AXIS_INDEX)),-           	! MOVE TO THE POSITIVE END LOOKING FOR THE ENCODER INDEX			
		TILL ^FAULT(A_N(AXIS_INDEX)).#RL, 60000  	! WAIT TO PROCEED UNTIL RIGHT LIMIT SWITHC HAS RELEASED						
	END
	! END IF HOMING IN POSITIVE DIRECTION					
RET

RET

LinNoLimHome:
	! HOMING ROUTINE FOR LINEAR WITHOUT LIMITS				
	FMASK(A_N(AXIS_INDEX)).13=0
	IF(HOME_DIR(AXIS_INDEX))=-1 				! IF AXIS DIRECTION IS -1
		JOG (A_N(AXIS_INDEX)),-           	! MOVE TO THE LEFT HARD STOP 			
		TILL (ABS(PE(A_N(AXIS_INDEX))))>0.05					! UNTIL ABS VALUE OF POSITION ERROR IS > .05mm 		
		HALT (A_N(AXIS_INDEX))				
		WAIT 100				
		JOG (A_N(AXIS_INDEX)),+           	! MOVE TO THE POSITIVE END LOOKING FOR THE ENCODER INDEX
	END				
	! END IF HOMING IN NEGATIVE DIRECTION				
	IF(HOME_DIR(AXIS_INDEX))=1 				! IF AXIS DIRECTION IS 1
		JOG (A_N(AXIS_INDEX)),+           	! MOVE TO THE RIGHT HARD STOP			
		TILL (ABS(PE(A_N(AXIS_INDEX))))>0.05					! UNTIL ABS VALUE OF POSITION ERROR IS > .05mm 				
		HALT (A_N(AXIS_INDEX))				
		WAIT 100				
		JOG (A_N(AXIS_INDEX)),-           	! MOVE TO THE NEGATIVE END LOOKING FOR THE ENCODER INDEX			
	END
	! END IF HOMING IN POSITIVE DIRECTION	
	WAIT 200
	FMASK(A_N(AXIS_INDEX)).13=1
RET

SetLimitMasking:
	IF (HARDLIMITS(AXIS_INDEX)=0) ! IF SOFT LIMITS SHOULD BE USED
		FMASK(A_N(AXIS_INDEX)).0 = 0 ! MASK THE RIGHT HARD LIMIT
		FMASK(A_N(AXIS_INDEX)).1 = 0 ! MASK THE LEFT HARD LIMIT
		FDEF(A_N(AXIS_INDEX)).#LL=0 	! DISABLE THE AXIS LEFT HARDWARE LIMIT DEFAULT RESPONSE
		FDEF(A_N(AXIS_INDEX)).#RL=0   ! DISABLE THE AXIS RIGHT HARDWARE LIMIT DEFAULT RESPONSE
		FMASK(A_N(AXIS_INDEX)).5 = 1 ! UNMASK THE RIGHT SOFT LIMIT
		FMASK(A_N(AXIS_INDEX)).6 = 1 ! UNMASK THE LEFT SOFT LIMIT
		FDEF(A_N(AXIS_INDEX)).#SLL=1 	! DISABLE THE AXIS LEFT HARDWARE LIMIT DEFAULT RESPONSE
		FDEF(A_N(AXIS_INDEX)).#SRL=1   ! DISABLE THE AXIS RIGHT HARDWARE LIMIT DEFAULT RESPONSE
		SRLIMIT(A_N(AXIS_INDEX)) = RSOFTLIMIT(AXIS_INDEX) ! SET THE RIGHT SOFT LIMIT LOCATION
		SLLIMIT(A_N(AXIS_INDEX)) = LSOFTLIMIT(AXIS_INDEX) ! SET THE LEFT SOFT LIMIT LOCATION
	END
	IF (HARDLIMITS(AXIS_INDEX)=1) ! IF HARD LIMITS SHOULD BE USED
		FMASK(A_N(AXIS_INDEX)).0 = 1 ! UNMASK THE RIGHT HARD LIMIT
		FMASK(A_N(AXIS_INDEX)).1 = 1 ! UNMASK THE LEFT HARD LIMIT
		FDEF(A_N(AXIS_INDEX)).#LL=1 	! DISABLE THE AXIS LEFT HARDWARE LIMIT DEFAULT RESPONSE
		FDEF(A_N(AXIS_INDEX)).#RL=1   ! DISABLE THE AXIS RIGHT HARDWARE LIMIT DEFAULT RESPONSE
		FMASK(A_N(AXIS_INDEX)).5 = 0 ! MASK THE RIGHT SOFT LIMIT
		FMASK(A_N(AXIS_INDEX)).6 = 0 ! MASK THE LEFT SOFT LIMIT
		FDEF(A_N(AXIS_INDEX)).#SLL=0 	! DISABLE THE AXIS LEFT HARDWARE LIMIT DEFAULT RESPONSE
		FDEF(A_N(AXIS_INDEX)).#SRL=0   ! DISABLE THE AXIS RIGHT HARDWARE LIMIT DEFAULT RESPONSE
		SRLIMIT(A_N(AXIS_INDEX)) = 99999 ! SET THE RIGHT SOFT LIMIT LOCATION
		SLLIMIT(A_N(AXIS_INDEX)) = -99999 ! SET THE LEFT SOFT LIMIT LOCATION
	END
RET

GantHome:
	! SETS A_N(GANT_AXES(0)) PARAMATERS IDENTICAL TO A_N(GANT_AXES(0))
	AXIS_LIMITS(GANT_AXES(1))=			AXIS_LIMITS(GANT_AXES(0))
	HOME_DIGITAL(GANT_AXES(1)) =		HOME_DIGITAL(GANT_AXES(0))
	HOME_DIR(GANT_AXES(1)) =			HOME_DIR(GANT_AXES(0))
	!H_O(GANT_AXES(1)) =					H_O(GANT_AXES(0))
	VELOCITY(GANT_AXES(1)) =			VELOCITY(GANT_AXES(0))
	COMMUT_ON(GANT_AXES(1)) =			COMMUT_ON(GANT_AXES(0))
	COMMUT_EXCITATION(GANT_AXES(1)) =	COMMUT_EXCITATION(GANT_AXES(0))
	AXIS_HOME(GANT_AXES(1)) =			AXIS_HOME(GANT_AXES(0))
	HARDLIMITS(GANT_AXES(1)) =			HARDLIMITS(GANT_AXES(0))
	RSOFTLIMIT(GANT_AXES(1)) =			RSOFTLIMIT(GANT_AXES(0))
	LSOFTLIMIT(GANT_AXES(1)) =			LSOFTLIMIT(GANT_AXES(0))
	
	!! A_N(GANT_AXES(1))
	MFLAGS(A_N(GANT_AXES(0))).25=0	! GANTRY MODE OFF
	MFLAGS(A_N(GANT_AXES(1))).25=0 	! GANTRY MODE OFF

	! SET TUNING PARAMETERS
	CALL TuningParameters
	
	! TURN OFF SOFT LIMITS FOR HOMING	
	FMASK(A_N(GANT_AXES(0))).5=0   ! MASK SOFTWARE RIGHT LIMIT	
	FMASK(A_N(GANT_AXES(0))).6=0	! MASK SOFTWARE LEFT LIMIT
	! TURN ON HARDWARE LIMITS FOR HOMING	
	FMASK(A_N(GANT_AXES(0))).0=1	! ACTIVATE RIGHT LIMIT
	FMASK(A_N(GANT_AXES(0))).1=1	! ACTIVATE LEFT LIMIT	
	! TURN OFF DEFAULT RESPONSE FOR HARDWARE LIMITS		
	FDEF(A_N(GANT_AXES(0))).#LL=0 	! DISABLE THE AXIS LEFT HARDWARE LIMIT DEFAULT RESPONSE	
	FDEF(A_N(GANT_AXES(0))).#RL=0   ! DISABLE THE AXIS RIGHT HARDWARE LIMIT DEFAULT RESPONSE

	! TURN OFF SOFT LIMITS FOR HOMING	
	FMASK(A_N(GANT_AXES(1))).5=0   ! MASK SOFTWARE RIGHT LIMIT	
	FMASK(A_N(GANT_AXES(1))).6=0	! MASK SOFTWARE LEFT LIMIT
	! TURN ON HARDWARE LIMITS FOR HOMING	
	FMASK(A_N(GANT_AXES(1))).0=1	! ACTIVATE RIGHT LIMIT
	FMASK(A_N(GANT_AXES(1))).1=1	! ACTIVATE LEFT LIMIT	
	! TURN OFF DEFAULT RESPONSE FOR HARDWARE LIMITS		
	FDEF(A_N(GANT_AXES(1))).#LL=0 	! DISABLE THE AXIS LEFT HARDWARE LIMIT DEFAULT RESPONSE	
	FDEF(A_N(GANT_AXES(1))).#RL=0   ! DISABLE THE AXIS RIGHT HARDWARE LIMIT DEFAULT RESPONSE
	
	!WAIT 1000 ! NEEDED FOR WIERD ENABLE FAILED ERROR BUG - DWA AND QW
	ENABLE (A_N(GANT_AXES(0)),A_N(GANT_AXES(1)))
	WAIT 1000
	
	IF MFLAGS(A_N(GANT_AXES(0))).9=0;
		IF(COMMUT_ON(GANT_AXES(0))=1)   !IF COMMUTATION IS SELECTED FOR AXIS
			MFLAGS(A_N(GANT_AXES(0))).9=0
			COMMUT (A_N(GANT_AXES(0))), (COMMUT_EXCITATION(GANT_AXES(0))),500 
			TILL MFLAGS(A_N(GANT_AXES(0))).9=1, 5000
		END
	END
	DISABLE A_N(GANT_AXES(0))
	WAIT 1000
	
	IF MFLAGS(A_N(GANT_AXES(1))).9=0;
		IF(COMMUT_ON(GANT_AXES(1))=1)   !IF COMMUTATION IS SELECTED FOR AXIS
			MFLAGS(A_N(GANT_AXES(1))).9=0
			COMMUT (A_N(GANT_AXES(1))), (COMMUT_EXCITATION(GANT_AXES(1))),500 
			TILL MFLAGS(A_N(GANT_AXES(1))).9=1, 5000
		END
	END
	ENABLE A_N(GANT_AXES(0))

	IF(AXIS_HOME(GANT_AXES(0))=1)
	
		!! GANT_AXES(0) !!		
		! HOMING ROUTINE FOR LINEAR WITH LIMITS				
		IF(AXIS_LIMITS(GANT_AXES(0))=1)               ! IF FOR AXIS WITH LIMITS
				! HOMING ROUTINE FOR LINEAR WITH LIMITS				
			IF(HOME_DIR(GANT_AXES(0)))=-1 				! IF AXIS DIRECTION IS -1
				!JOG (A_N(GANT_AXES(0)),A_N(GANT_AXES(1))),--           	! MOVE TO THE LEFT LIMIT SWITCH
				JOG (A_N(GANT_AXES(0))),-
				JOG (A_N(GANT_AXES(1))),-
				!TILL (FAULT(A_N(GANT_AXES(0))).#LL | FAULT(A_N(GANT_AXES(1))).#LL), 60000   	! WAIT FOR THE LEFT LIMIT SWITCH ACTIVATION			
				WHILE (^FAULT(A_N(GANT_AXES(0))).#LL | ^FAULT(A_N(GANT_AXES(1))).#LL)
					BLOCK
						IF FAULT(A_N(GANT_AXES(0))).#LL
							HALT A_N(GANT_AXES(0))
						END
						IF FAULT(A_N(GANT_AXES(1))).#LL
							HALT A_N(GANT_AXES(1))
						END
					END
				END
				HALT (A_N(GANT_AXES(0)),A_N(GANT_AXES(1)))				
				WAIT 10				
				JOG (A_N(GANT_AXES(0)),A_N(GANT_AXES(1))),++           	! MOVE TO THE POSITIVE END LOOKING FOR THE ENCODER INDEX
				TILL (^FAULT(A_N(GANT_AXES(0))).#LL & ^FAULT(A_N(GANT_AXES(1))).#LL), 60000  	! WAIT TO PROCEED UNTIL LEFT LIMIT SWITCH HAS RELEASED							
			END				
			! END IF HOMING IN NEGATIVE DIRECTION				
			IF(HOME_DIR(GANT_AXES(0)))=1 				! IF AXIS DIRECTION IS 1
				!JOG (A_N(GANT_AXES(0)),A_N(GANT_AXES(1))),++           	! MOVE TO THE RIGHT LIMIT SWITCH
				JOG (A_N(GANT_AXES(0))),+
				JOG (A_N(GANT_AXES(1))),+
				!TILL (FAULT(A_N(GANT_AXES(0))).#RL | FAULT(A_N(GANT_AXES(1))).#RL), 60000   	! WAIT FOR THE RIGHT LIMIT SWITCH ACTIVATION			
				WHILE (^FAULT(A_N(GANT_AXES(0))).#RL | ^FAULT(A_N(GANT_AXES(1))).#RL)
					BLOCK
						IF FAULT(A_N(GANT_AXES(0))).#RL
							HALT A_N(GANT_AXES(0))
						END
						IF FAULT(A_N(GANT_AXES(1))).#RL
							HALT A_N(GANT_AXES(1))
						END
					END
				END
				HALT (A_N(GANT_AXES(0)),A_N(GANT_AXES(1)))				
				WAIT 10				
				JOG (A_N(GANT_AXES(0)),A_N(GANT_AXES(1))),--           	! MOVE TO THE POSITIVE END LOOKING FOR THE ENCODER INDEX	
				TILL (^FAULT(A_N(GANT_AXES(0))).#RL & ^FAULT(A_N(GANT_AXES(1))).#RL), 60000  	! WAIT TO PROCEED UNTIL RIGHT LIMIT SWITCH HAS RELEASED						
			END
			! END IF HOMING IN POSITIVE DIRECTION
		END
		
		! HOMING ROUTINE FOR LINEAR WITHOUT LIMITS
		IF(AXIS_LIMITS(GANT_AXES(0))=2)               ! IF FOR AXIS WITHOUT LIMITS
			FMASK(A_N(GANT_AXES(0))).13=0
			FMASK(A_N(GANT_AXES(1))).13=0
			IF(HOME_DIR(AXIS_INDEX))=-1 				! IF AXIS DIRECTION IS -1
				JOG (A_N(GANT_AXES(0))),-									! MOVE TO THE LEFT HARD STOP 			
				JOG (A_N(GANT_AXES(1))),-
				!TILL ( (ABS(PE(A_N(GANT_AXES(0)))))>0.05 | (ABS(PE(A_N(GANT_AXES(1)))))>0.05 )	! UNTIL ABS VALUE OF POSITION ERROR IS > .05mm
				WHILE (^(ABS(PE(A_N(GANT_AXES(0)))))>0.05 | ^(ABS(PE(A_N(GANT_AXES(1)))))>0.05)
					IF (ABS(PE(A_N(GANT_AXES(0)))))>0.05
						HALT A_N(GANT_AXES(0))
					END
					IF (ABS(PE(A_N(GANT_AXES(1)))))>0.05
						HALT A_N(GANT_AXES(1))
					END
				END
				!HALT (A_N(GANT_AXES(0)),A_N(GANT_AXES(1)))
				WAIT 10
				JOG (A_N(GANT_AXES(0)),A_N(GANT_AXES(1))),++									! MOVE TO THE POSITIVE END LOOKING FOR THE ENCODER INDEX
			END				
			! END IF HOMING IN NEGATIVE DIRECTION				
			IF(HOME_DIR(AXIS_INDEX))=1 				! IF AXIS DIRECTION IS 1
				JOG (A_N(GANT_AXES(0)),A_N(GANT_AXES(1))),++									! MOVE TO THE RIGHT HARD STOP
				!TILL ( (ABS(PE(A_N(GANT_AXES(0)))))>0.05 | (ABS(PE(A_N(GANT_AXES(1)))))>0.05 )	! UNTIL ABS VALUE OF POSITION ERROR IS > .05mm
				WHILE (^(ABS(PE(A_N(GANT_AXES(0)))))>0.05 | ^(ABS(PE(A_N(GANT_AXES(1)))))>0.05)
					IF (ABS(PE(A_N(GANT_AXES(0)))))>0.05
						HALT A_N(GANT_AXES(0))
					END
					IF (ABS(PE(A_N(GANT_AXES(1)))))>0.05
						HALT A_N(GANT_AXES(1))
					END
				END
				!HALT (A_N(GANT_AXES(0)),A_N(GANT_AXES(1)))				
				WAIT 10				
				JOG (A_N(GANT_AXES(0)),A_N(GANT_AXES(1))),--									! MOVE TO THE POSITIVE END LOOKING FOR THE ENCODER INDEX
			END
			! END IF HOMING IN POSITIVE DIRECTION	
			WAIT 200
			FMASK(A_N(GANT_AXES(0))).13=1
			FMASK(A_N(GANT_AXES(1))).13=1
		END
		
		! SET HOME POSITION
		IST(A_N(GANT_AXES(0))).#IND=1       	! SET THE INDEX FLAG BIT (MUST DO THIS BEFORE SETTING IT TO ZERO)					
		IST(A_N(GANT_AXES(0))).#IND=0       	! RESET THE INDEX FLAG BIT				
		IST(A_N(GANT_AXES(1))).#IND=1       	! SET THE INDEX FLAG BIT (MUST DO THIS BEFORE SETTING IT TO ZERO)					
		IST(A_N(GANT_AXES(1))).#IND=0       	! RESET THE INDEX FLAG BIT				
		TILL (IST(A_N(GANT_AXES(0))).#IND & IST(A_N(GANT_AXES(1))).#IND), 60000    	! WAIT FOR INDEX READ
		WAIT 100	 
	 	HALT (GANT_AXES(0),GANT_AXES(1))
	 
		!***********************
		! NOTE THE SECTION BETWEEN THE "*"'S IS THE CODE THAT IS NECESSARY TO HAVE 
		! WHEN HOMING A SIN/COS ENCODER.  THIS CODE WAS PROVIDED BY ACS PER A TECH 
		! SUPPORT NOTE TO RESOLVE AN ISSUE WHERE HOMING WOULD NOT BE REPEATABLE 
		! BECAUSE IT WOULD NOT HOME TO THE SAME QUADRANT OF THE SIN/COS 20UM CYCLE
		! THUS HOMING REPEATABILITY COULD BE 5UM OR WORSE.
		! THIS SECTION IS NOT NEEDED FOR DIGITAL RESOLUTION ENCODERS. 
		IF (HOME_DIGITAL(GANT_AXES(0)))=0
			PTP(A_N(GANT_AXES(0))), IND(A_N(GANT_AXES(0))) + POW(2,(E_SCMUL(A_N(GANT_AXES(0)))-3))*EFAC(A_N(GANT_AXES(0)))	! Move to a middle of a quadrant, close to the index location
			TILL ^MST(A_N(GANT_AXES(0))).#MOVE, 30000
			WAIT 1000
			SET FPOS(A_N(GANT_AXES(0))) = FPOS(A_N(GANT_AXES(0))) - IND(A_N(GANT_AXES(0))) - GETCONF(265,A_N(GANT_AXES(0)))-H_O(GANT_AXES(0))	! Repeatability correction
		END
		!END SIN/COS HOMING REPEATABILITY FIX SECTION
		!***********************

		IF (HOME_DIGITAL(GANT_AXES(0)))=1
			SET FPOS(A_N(GANT_AXES(0)))=FPOS(A_N(GANT_AXES(0)))-IND(A_N(GANT_AXES(0)))-H_O(GANT_AXES(0))  ! Set axis origin to the position of index = zero
		END				
		
		!***********************
		! NOTE THE SECTION BETWEEN THE "*"'S IS THE CODE THAT IS NECESSARY TO HAVE 
		! WHEN HOMING A SIN/COS ENCODER.  THIS CODE WAS PROVIDED BY ACS PER A TECH 
		! SUPPORT NOTE TO RESOLVE AN ISSUE WHERE HOMING WOULD NOT BE REPEATABLE 
		! BECAUSE IT WOULD NOT HOME TO THE SAME QUADRANT OF THE SIN/COS 20UM CYCLE
		! THUS HOMING REPEATABILITY COULD BE 5UM OR WORSE.
		! THIS SECTION IS NOT NEEDED FOR DIGITAL RESOLUTION ENCODERS. 
		IF (HOME_DIGITAL(GANT_AXES(1)))=0
			PTP(A_N(GANT_AXES(1))), IND(A_N(GANT_AXES(1))) + POW(2,(E_SCMUL(A_N(GANT_AXES(1)))-3))*EFAC(A_N(GANT_AXES(1)))	! Move to a middle of a quadrant, close to the index location
			TILL ^MST(A_N(GANT_AXES(1))).#MOVE, 30000
			WAIT 1000
			SET FPOS(A_N(GANT_AXES(1))) = FPOS(A_N(GANT_AXES(1))) - IND(A_N(GANT_AXES(1))) - GETCONF(265,A_N(GANT_AXES(1)))-2.287867-H_O(GANT_AXES(0))	! Repeatability correction
		END
		!END SIN/COS HOMING REPEATABILITY FIX SECTION
		!***********************

		IF (HOME_DIGITAL(GANT_AXES(1)))=1
			SET FPOS(A_N(GANT_AXES(1)))=FPOS(A_N(GANT_AXES(1)))-IND(A_N(GANT_AXES(1)))-H_O(GANT_AXES(1))-H_O(GANT_AXES(0))  ! Set axis origin to the position of index = zero
		END
		
	END ! END IF HOMING=TRUE
	
	AXIS_INDEX = A_N(GANT_AXES(0))
	CALL SetLimitMasking		! SETS THE SOFT OR HARD LIMITS
	AXIS_INDEX = A_N(GANT_AXES(1))
	CALL SetLimitMasking		! SETS THE SOFT OR HARD LIMITS
	
	!!! DISABLE AXES AND SET GANTRY MODE ON, CHANGE TUNING PARAMETERS !!!
	DISABLE (A_N(GANT_AXES(0)),A_N(GANT_AXES(1)))      	! DISABLE THE AXIS
	
	MFLAGS(A_N(GANT_AXES(0))).25=1			! SET GANTRY MODE ON
	MFLAGS(A_N(GANT_AXES(1))).25=1			! SET GANTRY MODE ON

	! SET TUNING PARAMETERS FOR GANTRY MODE
	CALL TuningParametersGantry
	
	!!! RE-ENABLE AXES IN GANTRY MODE, DRIVE TO 0
	WAIT 1000
	ENABLE (A_N(GANT_AXES(0)),A_N(GANT_AXES(1)))

	HOME_FLAG(GANT_AXES(0))=1;			! SET HOME FLAG COMPLETE
	HOME_FLAG(GANT_AXES(1))=1;			! SET HOME FLAG COMPLETE
RET



StdHome: ! STANDARD HOMING
	
	CALL COMM_AND_FLAGS

	IF(AXIS_HOME(AXIS_INDEX)=1)
		! HOMING ROUTINE FOR ROTARY WITHOUT LIMITS
		IF(AXIS_LIMITS(AXIS_INDEX)=0)   ! IF AXIS DOES NOT HAVE LIMITS
			CALL RotNoLimHome
		END
		! HOMING ROUTINE FOR LINEAR WITH LIMITS				
		IF(AXIS_LIMITS(AXIS_INDEX)=1)               ! IF FOR AXIS WITH LIMITS
			CALL LinWithLimHome
		END
		! HOMING ROUTINE FOR LINEAR WITHOUT LIMITS				
		IF(AXIS_LIMITS(AXIS_INDEX)=2)               ! IF FOR AXIS WITH LIMITS
			CALL LinNoLimHome
		END
		! SET HOME POSITION
		IST(A_N(AXIS_INDEX)).#IND=1       	! SET THE INDEX FLAG BIT (MUST DO THIS BEFORE SETTING IT TO ZERO)					
		IST(A_N(AXIS_INDEX)).#IND=0       	! RESET THE INDEX FLAG BIT				
		TILL IST(A_N(AXIS_INDEX)).#IND, 60000    	! WAIT FOR INDEX READ
	 
		!***********************
		! NOTE THE SECTION BETWEEN THE "*"'S IS THE CODE THAT IS NECESSARY TO HAVE 
		! WHEN HOMING A SIN/COS ENCODER.  THIS CODE WAS PROVIDED BY ACS PER A TECH 
		! SUPPORT NOTE TO RESOLVE AN ISSUE WHERE HOMING WOULD NOT BE REPEATABLE 
		! BECAUSE IT WOULD NOT HOME TO THE SAME QUADRANT OF THE SIN/COS 20UM CYCLE
		! THUS HOMING REPEATABILITY COULD BE 5UM OR WORSE.
		! THIS SECTION IS NOT NEEDED FOR DIGITAL RESOLUTION ENCODERS.
		IF (HOME_DIGITAL(AXIS_INDEX))=0
			PTP(A_N(AXIS_INDEX)), IND(A_N(AXIS_INDEX)) + POW(2,(E_SCMUL(A_N(AXIS_INDEX))-3))*EFAC(A_N(AXIS_INDEX))	! Move to a middle of a quadrant, close to the index location
			TILL ^MST(A_N(AXIS_INDEX)).#MOVE, 30000
			WAIT 1000
			SET FPOS(A_N(AXIS_INDEX)) = FPOS(A_N(AXIS_INDEX)) - IND(A_N(AXIS_INDEX)) - GETCONF(265,A_N(AXIS_INDEX))-H_O(AXIS_INDEX)	! Repeatability correction
		END
		!END SIN/COS HOMING REPEATABILITY FIX SECTION
		!***********************
		IF (HOME_DIGITAL(AXIS_INDEX))=1
			SET FPOS(A_N(AXIS_INDEX))=FPOS(A_N(AXIS_INDEX))-IND(A_N(AXIS_INDEX))-H_O(AXIS_INDEX)  ! Set axis origin to the position of index = zero
		END
		
		HOME_FLAG(AXIS_INDEX)=1;			! SET HOME FLAG COMPLETE
		
	END ! END IF HOMING=TRUE		
RET

TuningParameters: 
	! SET TUNING PARAMETERS FOR AXES 0, 2
	SLPKP(A_N(GANT_AXES(0)))=10
	SLVKP(A_N(GANT_AXES(0)))=40
	SLVKI(A_N(GANT_AXES(0)))=200
	SLVSOF(A_N(GANT_AXES(0)))=700	! Low pass filter bandwidth
	MFLAGS(A_N(GANT_AXES(0))).14=0	! Notch Filter off (0=OFF, 1=ON)
	!SLVNATT(A_N(GANT_AXES(0)))=2
	!SLVNFRQ(A_N(GANT_AXES(0)))=410
	!SLVNWID(A_N(GANT_AXES(0)))=100
	MFLAGS(A_N(GANT_AXES(0))).16=0	! First Biquad filter (0=OFF, 1=ON)
	!SLVB0DD(A_N(GANT_AXES(0)))=0.5
	!SLVB0DF(A_N(GANT_AXES(0)))=400
	!SLVB0ND(A_N(GANT_AXES(0)))=0.1
	!SLVB0NF(A_N(GANT_AXES(0)))=500
	MFLAGS(A_N(GANT_AXES(0))).26=0	! Second Biquad filter (0=OFF, 1=ON)
	!SLVB1DD(A_N(GANT_AXES(0)))=0.5
	!SLVB1DF(A_N(GANT_AXES(0)))=450
	!SLVB1ND(A_N(GANT_AXES(0)))=0.1
	!SLVB1NF(A_N(GANT_AXES(0)))=500
	
	SLPKP(A_N(GANT_AXES(1)))=10
	SLVKP(A_N(GANT_AXES(1)))=40
	SLVKI(A_N(GANT_AXES(1)))=200
	SLVSOF(A_N(GANT_AXES(1)))=700	! Low pass filter bandwidth
	MFLAGS(A_N(GANT_AXES(1))).14=0	! Notch Filter off (0=OFF, 1=ON)
	!SLVNATT(A_N(GANT_AXES(1)))=2
	!SLVNFRQ(A_N(GANT_AXES(1)))=410
	!SLVNWID(A_N(GANT_AXES(1)))=100
	MFLAGS(A_N(GANT_AXES(1))).16=0	! First Biquad filter (0=OFF, 1=ON)
	!SLVB0DD(A_N(GANT_AXES(1)))=0.5
	!SLVB0DF(A_N(GANT_AXES(1)))=450
	!SLVB0ND(A_N(GANT_AXES(1)))=0.1
	!SLVB0NF(A_N(GANT_AXES(1)))=500
	MFLAGS(A_N(GANT_AXES(1))).26=0	! Second Biquad filter (0=OFF, 1=ON)
	!SLVB1DD(A_N(GANT_AXES(1)))=0.5
	!SLVB1DF(A_N(GANT_AXES(1)))=450
	!SLVB1ND(A_N(GANT_AXES(1)))=0.1
	!SLVB1NF(A_N(GANT_AXES(1)))=500
RET

TuningParametersGantry:
	! SET TUNING PARAMETERS FOR GANTRY YAW and X
	SLPKP(A_N(GANT_AXES(0)))=50
	SLVKP(A_N(GANT_AXES(0)))=80
	SLVKI(A_N(GANT_AXES(0)))=200
	SLVSOF(A_N(GANT_AXES(0)))=700	! Low pass filter bandwidth
	MFLAGS(A_N(GANT_AXES(0))).14=0	! Notch Filter off (0=OFF, 1=ON)
	SLVNATT(A_N(GANT_AXES(0)))=2
	SLVNFRQ(A_N(GANT_AXES(0)))=410
	SLVNWID(A_N(GANT_AXES(0)))=100
	MFLAGS(A_N(GANT_AXES(0))).16=0	! First Biquad filter (0=OFF, 1=ON)
	SLVB0DD(A_N(GANT_AXES(0)))=0.5
	SLVB0DF(A_N(GANT_AXES(0)))=450
	SLVB0ND(A_N(GANT_AXES(0)))=0.1
	SLVB0NF(A_N(GANT_AXES(0)))=600
	MFLAGS(A_N(GANT_AXES(0))).26=0	! Second Biquad filter (0=OFF, 1=ON)
	!SLVB1DD(A_N(GANT_AXES(0)))=0.5
	!SLVB1DF(A_N(GANT_AXES(0)))=450
	!SLVB1ND(A_N(GANT_AXES(0)))=0.1
	!SLVB1NF(A_N(GANT_AXES(0)))=500
	
	SLPKP(A_N(GANT_AXES(1)))=50
	SLVKP(A_N(GANT_AXES(1)))=8
	SLVKI(A_N(GANT_AXES(1)))=200
	SLVSOF(A_N(GANT_AXES(1)))=700	! Low pass filter bandwidth
	MFLAGS(A_N(GANT_AXES(1))).14=0	! Notch Filter off (0=OFF, 1=ON)
	SLVNATT(A_N(GANT_AXES(1)))=2
	SLVNFRQ(A_N(GANT_AXES(1)))=794
	SLVNWID(A_N(GANT_AXES(1)))=100
	MFLAGS(A_N(GANT_AXES(1))).16=0	! First Biquad filter (0=OFF, 1=ON)
	SLVB0DD(A_N(GANT_AXES(1)))=0.5
	SLVB0DF(A_N(GANT_AXES(1)))=450
	SLVB0ND(A_N(GANT_AXES(1)))=0.1
	SLVB0NF(A_N(GANT_AXES(1)))=600
	MFLAGS(A_N(GANT_AXES(1))).26=0	! Second Biquad filter (0=OFF, 1=ON)
	!SLVB1DD(A_N(GANT_AXES(1)))=0.5
	!SLVB1DF(A_N(GANT_AXES(1)))=450
	!SLVB1ND(A_N(GANT_AXES(1)))=0.1
	!SLVB1NF(A_N(GANT_AXES(1)))=500
RET

COMM_AND_FLAGS:
	! TURN OFF SOFT LIMITS FOR HOMING	
	FMASK(A_N(AXIS_INDEX)).5=0   ! MASK SOFTWARE RIGHT LIMIT	
	FMASK(A_N(AXIS_INDEX)).6=0	! MASK SOFTWARE LEFT LIMIT
	! TURN ON HARDWARE LIMITS FOR HOMING	
	FMASK(A_N(AXIS_INDEX)).0=1	! ACTIVATE RIGHT LIMIT
	FMASK(A_N(AXIS_INDEX)).1=1	! ACTIVATE LEFT LIMIT	
	! TURN OFF DEFAULT RESPONSE FOR HARDWARE LIMITS		
	FDEF(A_N(AXIS_INDEX)).#LL=0 	! DISABLE THE AXIS LEFT HARDWARE LIMIT DEFAULT RESPONSE	
	FDEF(A_N(AXIS_INDEX)).#RL=0   ! DISABLE THE AXIS RIGHT HARDWARE LIMIT DEFAULT RESPONSE		
	
	BLOCK
	ENABLE (A_N(AXIS_INDEX))      	! ENABLE THE AXIS 
	!TILL MST(A_N(AXIS_INDEX)).#ENABLED=1
	!WAIT 100
	
	IF MFLAGS(A_N(AXIS_INDEX)).9=0;
		IF(COMMUT_ON(AXIS_INDEX)=1)   !IF COMMUTATION IS SELECTED FOR AXIS
			MFLAGS(A_N(AXIS_INDEX)).9=0
			COMMUT (A_N(AXIS_INDEX)), (COMMUT_EXCITATION(AXIS_INDEX)), 1000
			TILL MFLAGS(A_N(AXIS_INDEX)).9=1, 5000
		END
	END
	END
RET