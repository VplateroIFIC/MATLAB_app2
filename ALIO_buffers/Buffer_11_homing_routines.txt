
HomeXY:
	! GANTRY HOMING
	! - Commutate the motor on axis 0
	! - Move axes 0 and 2 to the left/right end of travel. 
	! - Move back toward the encoder index.
	! - Once index on axis 0 is seen, halt
	! - Set the axis 0 origin to the position of index.
	! - Move axes 0 and 2 toward the left/right end of travel 10mm
	! - Move back toward the encoder index.
	! - Once index on axis 2 is seen, halt
	! - Set the axis 2 origin to the position of index.
	! - Move to the origin.
	CALL GantHome
	PTP/em (A_N(GANT_AXES(0)),A_N(GANT_AXES(1))),0,0	! MOVE GANTRY AXES TO ZERO
RET

HomeZ1:

! STANDARD HOMING
	! HOMES EACH AXIS THROUGH THE FOLLOWING SEQUENCE (Rotary sequence differs, see note below)
	! - Commutate the motor.
	! - Move to the left/right end of travel. 
	! - Move toward the encoder index.
	! - Once index is seen, halt
	! - Set the axis origin to the position of index.
	! - Move to the origin.
	AXIS_INDEX=4
		! IF THE AXIS IS ONE OF THE GANTRY AXES, THEN SKIP IT
			CALL StdHome
			CALL SetLimitMasking		! SETS THE SOFT OR HARD LIMITS
			PTP/e (A_N(AXIS_INDEX)), 0	! MOVE TO ZERO
RET


HomeZ2:

! STANDARD HOMING
	! HOMES EACH AXIS THROUGH THE FOLLOWING SEQUENCE (Rotary sequence differs, see note below)
	! - Commutate the motor.
	! - Move to the left/right end of travel. 
	! - Move toward the encoder index.
	! - Once index is seen, halt
	! - Set the axis origin to the position of index.
	! - Move to the origin.
	AXIS_INDEX=5
		! IF THE AXIS IS ONE OF THE GANTRY AXES, THEN SKIP IT
			CALL StdHome
			CALL SetLimitMasking		! SETS THE SOFT OR HARD LIMITS
			PTP/e (A_N(AXIS_INDEX)), 0	! MOVE TO ZERO
RET


HomeU:

! STANDARD HOMING
	! HOMES EACH AXIS THROUGH THE FOLLOWING SEQUENCE (Rotary sequence differs, see note below)
	! - Commutate the motor.
	! - Move to the left/right end of travel. 
	! - Move toward the encoder index.
	! - Once index is seen, halt
	! - Set the axis origin to the position of index.
	! - Move to the origin.
	AXIS_INDEX=6
		! IF THE AXIS IS ONE OF THE GANTRY AXES, THEN SKIP IT
			CALL StdHome
			CALL SetLimitMasking		! SETS THE SOFT OR HARD LIMITS
			PTP/e (A_N(AXIS_INDEX)), 0	! MOVE TO ZERO
RET



RotNoLimHome:
	! HOMING ROUTINE FOR ROTARY WITHOUT LIMITS
	IF(HOME_DIR(AXIS_INDEX))=1 	! IF AXIS DIRECTION IS 1
		PTP/er (A_N(AXIS_INDEX)), -10
		WAIT 100
		JOG (A_N(AXIS_INDEX)),+	! MOVE IN THE POSITIVE DIRECTION
	END
	IF(HOME_DIR(AXIS_INDEX))=-1 	! IF AXIS DIRECTION IS -1
		PTP/er (A_N(AXIS_INDEX)), 10
		WAIT 100
		JOG (A_N(AXIS_INDEX)),-	! MOVE IN THE NEGATIVE DIRECTION
	END
RET

LinWithLimHome:
	! HOMING ROUTINE FOR LINEAR WITH LIMITS				
	IF(HOME_DIR(AXIS_INDEX))=-1 				! IF AXIS DIRECTION IS -1
		JOG (A_N(AXIS_INDEX)),-           	! MOVE TO THE LEFT LIMIT SWITCH 			
		TILL FAULT(A_N(AXIS_INDEX)).#LL, 60000   	! WAIT FOR THE LEFT LIMIT SWITCH ACTIVATION			
		HALT (A_N(AXIS_INDEX))				
		WAIT 50				
		JOG (A_N(AXIS_INDEX)),+           	! MOVE TO THE POSITIVE END LOOKING FOR THE ENCODER INDEX			
		TILL ^FAULT(A_N(AXIS_INDEX)).#LL, 60000  	! WAIT TO PROCEED UNTIL LEFT LIMIT SWITHC HAS RELEASED							
	END				
	! END IF HOMING IN NEGATIVE DIRECTION				
	IF(HOME_DIR(AXIS_INDEX))=1 				! IF AXIS DIRECTION IS 1
		JOG (A_N(AXIS_INDEX)),+           	! MOVE TO THE RIGHT LIMIT SWITCH 			
		TILL FAULT(A_N(AXIS_INDEX)).#RL, 60000   	! WAIT FOR THE RIGHT LIMIT SWITCH ACTIVATION			
		HALT (A_N(AXIS_INDEX))				
		WAIT 50				
		JOG (A_N(AXIS_INDEX)),-           	! MOVE TO THE POSITIVE END LOOKING FOR THE ENCODER INDEX			
		TILL ^FAULT(A_N(AXIS_INDEX)).#RL, 60000  	! WAIT TO PROCEED UNTIL RIGHT LIMIT SWITHC HAS RELEASED						
	END
	! END IF HOMING IN POSITIVE DIRECTION					
RET

RET

LinNoLimHome:
	! HOMING ROUTINE FOR LINEAR WITHOUT LIMITS				
	FMASK(A_N(AXIS_INDEX)).13=0
	IF(HOME_DIR(AXIS_INDEX))=-1 				! IF AXIS DIRECTION IS -1
		JOG (A_N(AXIS_INDEX)),-           	! MOVE TO THE LEFT HARD STOP 			
		TILL (ABS(PE(A_N(AXIS_INDEX))))>0.05					! UNTIL ABS VALUE OF POSITION ERROR IS > .05mm 		
		HALT (A_N(AXIS_INDEX))				
		WAIT 100				
		JOG (A_N(AXIS_INDEX)),+           	! MOVE TO THE POSITIVE END LOOKING FOR THE ENCODER INDEX
	END				
	! END IF HOMING IN NEGATIVE DIRECTION				
	IF(HOME_DIR(AXIS_INDEX))=1 				! IF AXIS DIRECTION IS 1
		JOG (A_N(AXIS_INDEX)),+           	! MOVE TO THE RIGHT HARD STOP			
		TILL (ABS(PE(A_N(AXIS_INDEX))))>0.05					! UNTIL ABS VALUE OF POSITION ERROR IS > .05mm 				
		HALT (A_N(AXIS_INDEX))				
		WAIT 100				
		JOG (A_N(AXIS_INDEX)),-           	! MOVE TO THE NEGATIVE END LOOKING FOR THE ENCODER INDEX			
	END
	! END IF HOMING IN POSITIVE DIRECTION	
	WAIT 200
	FMASK(A_N(AXIS_INDEX)).13=1
RET

SetLimitMasking:
	IF (HARDLIMITS(AXIS_INDEX)=0) ! IF SOFT LIMITS SHOULD BE USED
		FMASK(A_N(AXIS_INDEX)).0 = 0 ! MASK THE RIGHT HARD LIMIT
		FMASK(A_N(AXIS_INDEX)).1 = 0 ! MASK THE LEFT HARD LIMIT
		FDEF(A_N(AXIS_INDEX)).#LL=0 	! DISABLE THE AXIS LEFT HARDWARE LIMIT DEFAULT RESPONSE
		FDEF(A_N(AXIS_INDEX)).#RL=0   ! DISABLE THE AXIS RIGHT HARDWARE LIMIT DEFAULT RESPONSE
		FMASK(A_N(AXIS_INDEX)).5 = 1 ! UNMASK THE RIGHT SOFT LIMIT
		FMASK(A_N(AXIS_INDEX)).6 = 1 ! UNMASK THE LEFT SOFT LIMIT
		FDEF(A_N(AXIS_INDEX)).#SLL=1 	! DISABLE THE AXIS LEFT HARDWARE LIMIT DEFAULT RESPONSE
		FDEF(A_N(AXIS_INDEX)).#SRL=1   ! DISABLE THE AXIS RIGHT HARDWARE LIMIT DEFAULT RESPONSE
		SRLIMIT(A_N(AXIS_INDEX)) = RSOFTLIMIT(AXIS_INDEX) ! SET THE RIGHT SOFT LIMIT LOCATION
		SLLIMIT(A_N(AXIS_INDEX)) = LSOFTLIMIT(AXIS_INDEX) ! SET THE LEFT SOFT LIMIT LOCATION
	END
	IF (HARDLIMITS(AXIS_INDEX)=1) ! IF HARD LIMITS SHOULD BE USED
		FMASK(A_N(AXIS_INDEX)).0 = 1 ! UNMASK THE RIGHT HARD LIMIT
		FMASK(A_N(AXIS_INDEX)).1 = 1 ! UNMASK THE LEFT HARD LIMIT
		FDEF(A_N(AXIS_INDEX)).#LL=1 	! DISABLE THE AXIS LEFT HARDWARE LIMIT DEFAULT RESPONSE
		FDEF(A_N(AXIS_INDEX)).#RL=1   ! DISABLE THE AXIS RIGHT HARDWARE LIMIT DEFAULT RESPONSE
		FMASK(A_N(AXIS_INDEX)).5 = 0 ! MASK THE RIGHT SOFT LIMIT
		FMASK(A_N(AXIS_INDEX)).6 = 0 ! MASK THE LEFT SOFT LIMIT
		FDEF(A_N(AXIS_INDEX)).#SLL=0 	! DISABLE THE AXIS LEFT HARDWARE LIMIT DEFAULT RESPONSE
		FDEF(A_N(AXIS_INDEX)).#SRL=0   ! DISABLE THE AXIS RIGHT HARDWARE LIMIT DEFAULT RESPONSE
		SRLIMIT(A_N(AXIS_INDEX)) = 99999 ! SET THE RIGHT SOFT LIMIT LOCATION
		SLLIMIT(A_N(AXIS_INDEX)) = -99999 ! SET THE LEFT SOFT LIMIT LOCATION
	END
RET

GantHome:
	! SETS A_N(GANT_AXES(0)) PARAMATERS IDENTICAL TO A_N(GANT_AXES(0))
	AXIS_LIMITS(GANT_AXES(1))=			AXIS_LIMITS(GANT_AXES(0))
	HOME_DIGITAL(GANT_AXES(1)) =		HOME_DIGITAL(GANT_AXES(0))
	HOME_DIR(GANT_AXES(1)) =			HOME_DIR(GANT_AXES(0))
	!H_O(GANT_AXES(1)) =					H_O(GANT_AXES(0))
	VELOCITY(GANT_AXES(1)) =			VELOCITY(GANT_AXES(0))
	COMMUT_ON(GANT_AXES(1)) =			COMMUT_ON(GANT_AXES(0))
	COMMUT_EXCITATION(GANT_AXES(1)) =	COMMUT_EXCITATION(GANT_AXES(0))
	AXIS_HOME(GANT_AXES(1)) =			AXIS_HOME(GANT_AXES(0))
	HARDLIMITS(GANT_AXES(1)) =			HARDLIMITS(GANT_AXES(0))
	RSOFTLIMIT(GANT_AXES(1)) =			RSOFTLIMIT(GANT_AXES(0))
	LSOFTLIMIT(GANT_AXES(1)) =			LSOFTLIMIT(GANT_AXES(0))
	
	!! A_N(GANT_AXES(1))
	MFLAGS(A_N(GANT_AXES(0))).25=0	! GANTRY MODE OFF
	MFLAGS(A_N(GANT_AXES(1))).25=0 	! GANTRY MODE OFF

	! SET TUNING PARAMETERS
	CALL TuningParameters
	
	! TURN OFF SOFT LIMITS FOR HOMING	
	FMASK(A_N(GANT_AXES(0))).5=0   ! MASK SOFTWARE RIGHT LIMIT	
	FMASK(A_N(GANT_AXES(0))).6=0	! MASK SOFTWARE LEFT LIMIT
	! TURN ON HARDWARE LIMITS FOR HOMING	
	FMASK(A_N(GANT_AXES(0))).0=1	! ACTIVATE RIGHT LIMIT
	FMASK(A_N(GANT_AXES(0))).1=1	! ACTIVATE LEFT LIMIT	
	! TURN OFF DEFAULT RESPONSE FOR HARDWARE LIMITS		
	FDEF(A_N(GANT_AXES(0))).#LL=0 	! DISABLE THE AXIS LEFT HARDWARE LIMIT DEFAULT RESPONSE	
	FDEF(A_N(GANT_AXES(0))).#RL=0   ! DISABLE THE AXIS RIGHT HARDWARE LIMIT DEFAULT RESPONSE

	! TURN OFF SOFT LIMITS FOR HOMING	
	FMASK(A_N(GANT_AXES(1))).5=0   ! MASK SOFTWARE RIGHT LIMIT	
	FMASK(A_N(GANT_AXES(1))).6=0	! MASK SOFTWARE LEFT LIMIT
	! TURN ON HARDWARE LIMITS FOR HOMING	
	FMASK(A_N(GANT_AXES(1))).0=1	! ACTIVATE RIGHT LIMIT
	FMASK(A_N(GANT_AXES(1))).1=1	! ACTIVATE LEFT LIMIT	
	! TURN OFF DEFAULT RESPONSE FOR HARDWARE LIMITS		
	FDEF(A_N(GANT_AXES(1))).#LL=0 	! DISABLE THE AXIS LEFT HARDWARE LIMIT DEFAULT RESPONSE	
	FDEF(A_N(GANT_AXES(1))).#RL=0   ! DISABLE THE AXIS RIGHT HARDWARE LIMIT DEFAULT RESPONSE
	
	!WAIT 1000 ! NEEDED FOR WIERD ENABLE FAILED ERROR BUG - DWA AND QW
	ENABLE (A_N(GANT_AXES(0)),A_N(GANT_AXES(1)))
	WAIT 1000
	
	IF MFLAGS(A_N(GANT_AXES(0))).9=0;
		IF(COMMUT_ON(GANT_AXES(0))=1)   !IF COMMUTATION IS SELECTED FOR AXIS
			MFLAGS(A_N(GANT_AXES(0))).9=0
			COMMUT (A_N(GANT_AXES(0))), (COMMUT_EXCITATION(GANT_AXES(0))),500 
			TILL MFLAGS(A_N(GANT_AXES(0))).9=1, 5000
		END
	END
	DISABLE A_N(GANT_AXES(0))
	WAIT 1000
	
	IF MFLAGS(A_N(GANT_AXES(1))).9=0;
		IF(COMMUT_ON(GANT_AXES(1))=1)   !IF COMMUTATION IS SELECTED FOR AXIS
			MFLAGS(A_N(GANT_AXES(1))).9=0
			COMMUT (A_N(GANT_AXES(1))), (COMMUT_EXCITATION(GANT_AXES(1))),500 
			TILL MFLAGS(A_N(GANT_AXES(1))).9=1, 5000
		END
	END
	ENABLE A_N(GANT_AXES(0))

	IF(AXIS_HOME(GANT_AXES(0))=1)
	
		!! GANT_AXES(0) !!		
		! HOMING ROUTINE FOR LINEAR WITH LIMITS				
		IF(AXIS_LIMITS(GANT_AXES(0))=1)               ! IF FOR AXIS WITH LIMITS
				! HOMING ROUTINE FOR LINEAR WITH LIMITS				
			IF(HOME_DIR(GANT_AXES(0)))=-1 				! IF AXIS DIRECTION IS -1
				!JOG (A_N(GANT_AXES(0)),A_N(GANT_AXES(1))),--           	! MOVE TO THE LEFT LIMIT SWITCH
				JOG (A_N(GANT_AXES(0))),-
				JOG (A_N(GANT_AXES(1))),-
				!TILL (FAULT(A_N(GANT_AXES(0))).#LL | FAULT(A_N(GANT_AXES(1))).#LL), 60000   	! WAIT FOR THE LEFT LIMIT SWITCH ACTIVATION			
				WHILE (^FAULT(A_N(GANT_AXES(0))).#LL | ^FAULT(A_N(GANT_AXES(1))).#LL)
					BLOCK
						IF FAULT(A_N(GANT_AXES(0))).#LL
							HALT A_N(GANT_AXES(0))
						END
						IF FAULT(A_N(GANT_AXES(1))).#LL
							HALT A_N(GANT_AXES(1))
						END
					END
				END
				HALT (A_N(GANT_AXES(0)),A_N(GANT_AXES(1)))				
				WAIT 10				
				JOG (A_N(GANT_AXES(0)),A_N(GANT_AXES(1))),++           	! MOVE TO THE POSITIVE END LOOKING FOR THE ENCODER INDEX
				TILL (^FAULT(A_N(GANT_AXES(0))).#LL & ^FAULT(A_N(GANT_AXES(1))).#LL), 60000  	! WAIT TO PROCEED UNTIL LEFT LIMIT SWITCH HAS RELEASED							
			END				
			! END IF HOMING IN NEGATIVE DIRECTION				
			IF(HOME_DIR(GANT_AXES(0)))=1 				! IF AXIS DIRECTION IS 1
				!JOG (A_N(GANT_AXES(0)),A_N(GANT_AXES(1))),++           	! MOVE TO THE RIGHT LIMIT SWITCH
				JOG (A_N(GANT_AXES(0))),+
				JOG (A_N(GANT_AXES(1))),+
				!TILL (FAULT(A_N(GANT_AXES(0))).#RL | FAULT(A_N(GANT_AXES(1))).#RL), 60000   	! WAIT FOR THE RIGHT LIMIT SWITCH ACTIVATION			
				WHILE (^FAULT(A_N(GANT_AXES(0))).#RL | ^FAULT(A_N(GANT_AXES(1))).#RL)
					BLOCK
						IF FAULT(A_N(GANT_AXES(0))).#RL
							HALT A_N(GANT_AXES(0))
						END
						IF FAULT(A_N(GANT_AXES(1))).#RL
							HALT A_N(GANT_AXES(1))
						END
					END
				END
				HALT (A_N(GANT_AXES(0)),A_N(GANT_AXES(1)))				
				WAIT 10				
				JOG (A_N(GANT_AXES(0)),A_N(GANT_AXES(1))),--           	! MOVE TO THE POSITIVE END LOOKING FOR THE ENCODER INDEX	
				TILL (^FAULT(A_N(GANT_AXES(0))).#RL & ^FAULT(A_N(GANT_AXES(1))).#RL), 60000  	! WAIT TO PROCEED UNTIL RIGHT LIMIT SWITCH HAS RELEASED						
			END
			! END IF HOMING IN POSITIVE DIRECTION
		END
		
		! HOMING ROUTINE FOR LINEAR WITHOUT LIMITS
		IF(AXIS_LIMITS(GANT_AXES(0))=2)               ! IF FOR AXIS WITHOUT LIMITS
			FMASK(A_N(GANT_AXES(0))).13=0
			FMASK(A_N(GANT_AXES(1))).13=0
			IF(HOME_DIR(AXIS_INDEX))=-1 				! IF AXIS DIRECTION IS -1
				JOG (A_N(GANT_AXES(0))),-									! MOVE TO THE LEFT HARD STOP 			
				JOG (A_N(GANT_AXES(1))),-
				!TILL ( (ABS(PE(A_N(GANT_AXES(0)))))>0.05 | (ABS(PE(A_N(GANT_AXES(1)))))>0.05 )	! UNTIL ABS VALUE OF POSITION ERROR IS > .05mm
				WHILE (^(ABS(PE(A_N(GANT_AXES(0)))))>0.05 | ^(ABS(PE(A_N(GANT_AXES(1)))))>0.05)
					IF (ABS(PE(A_N(GANT_AXES(0)))))>0.05
						HALT A_N(GANT_AXES(0))
					END
					IF (ABS(PE(A_N(GANT_AXES(1)))))>0.05
						HALT A_N(GANT_AXES(1))
					END
				END
				!HALT (A_N(GANT_AXES(0)),A_N(GANT_AXES(1)))
				WAIT 10
				JOG (A_N(GANT_AXES(0)),A_N(GANT_AXES(1))),++									! MOVE TO THE POSITIVE END LOOKING FOR THE ENCODER INDEX
			END				
			! END IF HOMING IN NEGATIVE DIRECTION				
			IF(HOME_DIR(AXIS_INDEX))=1 				! IF AXIS DIRECTION IS 1
				JOG (A_N(GANT_AXES(0)),A_N(GANT_AXES(1))),++									! MOVE TO THE RIGHT HARD STOP
				!TILL ( (ABS(PE(A_N(GANT_AXES(0)))))>0.05 | (ABS(PE(A_N(GANT_AXES(1)))))>0.05 )	! UNTIL ABS VALUE OF POSITION ERROR IS > .05mm
				WHILE (^(ABS(PE(A_N(GANT_AXES(0)))))>0.05 | ^(ABS(PE(A_N(GANT_AXES(1)))))>0.05)
					IF (ABS(PE(A_N(GANT_AXES(0)))))>0.05
						HALT A_N(GANT_AXES(0))
					END
					IF (ABS(PE(A_N(GANT_AXES(1)))))>0.05
						HALT A_N(GANT_AXES(1))
					END
				END
				!HALT (A_N(GANT_AXES(0)),A_N(GANT_AXES(1)))				
				WAIT 10				
				JOG (A_N(GANT_AXES(0)),A_N(GANT_AXES(1))),--									! MOVE TO THE POSITIVE END LOOKING FOR THE ENCODER INDEX
			END
			! END IF HOMING IN POSITIVE DIRECTION	
			WAIT 200
			FMASK(A_N(GANT_AXES(0))).13=1
			FMASK(A_N(GANT_AXES(1))).13=1
		END
		
		! SET HOME POSITION
		IST(A_N(GANT_AXES(0))).#IND=1       	! SET THE INDEX FLAG BIT (MUST DO THIS BEFORE SETTING IT TO ZERO)					
		IST(A_N(GANT_AXES(0))).#IND=0       	! RESET THE INDEX FLAG BIT				
		IST(A_N(GANT_AXES(1))).#IND=1       	! SET THE INDEX FLAG BIT (MUST DO THIS BEFORE SETTING IT TO ZERO)					
		IST(A_N(GANT_AXES(1))).#IND=0       	! RESET THE INDEX FLAG BIT				
		TILL (IST(A_N(GANT_AXES(0))).#IND & IST(A_N(GANT_AXES(1))).#IND), 60000    	! WAIT FOR INDEX READ
		WAIT 100	 
	 	HALT (GANT_AXES(0),GANT_AXES(1))
	 
		!***********************
		! NOTE THE SECTION BETWEEN THE "*"'S IS THE CODE THAT IS NECESSARY TO HAVE 
		! WHEN HOMING A SIN/COS ENCODER.  THIS CODE WAS PROVIDED BY ACS PER A TECH 
		! SUPPORT NOTE TO RESOLVE AN ISSUE WHERE HOMING WOULD NOT BE REPEATABLE 
		! BECAUSE IT WOULD NOT HOME TO THE SAME QUADRANT OF THE SIN/COS 20UM CYCLE
		! THUS HOMING REPEATABILITY COULD BE 5UM OR WORSE.
		! THIS SECTION IS NOT NEEDED FOR DIGITAL RESOLUTION ENCODERS. 
		IF (HOME_DIGITAL(GANT_AXES(0)))=0
			PTP(A_N(GANT_AXES(0))), IND(A_N(GANT_AXES(0))) + POW(2,(E_SCMUL(A_N(GANT_AXES(0)))-3))*EFAC(A_N(GANT_AXES(0)))	! Move to a middle of a quadrant, close to the index location
			TILL ^MST(A_N(GANT_AXES(0))).#MOVE, 30000
			WAIT 1000
			SET FPOS(A_N(GANT_AXES(0))) = FPOS(A_N(GANT_AXES(0))) - IND(A_N(GANT_AXES(0))) - GETCONF(265,A_N(GANT_AXES(0)))-H_O(GANT_AXES(0))	! Repeatability correction
		END
		!END SIN/COS HOMING REPEATABILITY FIX SECTION
		!***********************

		IF (HOME_DIGITAL(GANT_AXES(0)))=1
			SET FPOS(A_N(GANT_AXES(0)))=FPOS(A_N(GANT_AXES(0)))-IND(A_N(GANT_AXES(0)))-H_O(GANT_AXES(0))  ! Set axis origin to the position of index = zero
		END				
		
		!***********************
		! NOTE THE SECTION BETWEEN THE "*"'S IS THE CODE THAT IS NECESSARY TO HAVE 
		! WHEN HOMING A SIN/COS ENCODER.  THIS CODE WAS PROVIDED BY ACS PER A TECH 
		! SUPPORT NOTE TO RESOLVE AN ISSUE WHERE HOMING WOULD NOT BE REPEATABLE 
		! BECAUSE IT WOULD NOT HOME TO THE SAME QUADRANT OF THE SIN/COS 20UM CYCLE
		! THUS HOMING REPEATABILITY COULD BE 5UM OR WORSE.
		! THIS SECTION IS NOT NEEDED FOR DIGITAL RESOLUTION ENCODERS. 
		IF (HOME_DIGITAL(GANT_AXES(1)))=0
			PTP(A_N(GANT_AXES(1))), IND(A_N(GANT_AXES(1))) + POW(2,(E_SCMUL(A_N(GANT_AXES(1)))-3))*EFAC(A_N(GANT_AXES(1)))	! Move to a middle of a quadrant, close to the index location
			TILL ^MST(A_N(GANT_AXES(1))).#MOVE, 30000
			WAIT 1000
			SET FPOS(A_N(GANT_AXES(1))) = FPOS(A_N(GANT_AXES(1))) - IND(A_N(GANT_AXES(1))) - GETCONF(265,A_N(GANT_AXES(1)))-2.287867-H_O(GANT_AXES(0))	! Repeatability correction
		END
		!END SIN/COS HOMING REPEATABILITY FIX SECTION
		!***********************

		IF (HOME_DIGITAL(GANT_AXES(1)))=1
			SET FPOS(A_N(GANT_AXES(1)))=FPOS(A_N(GANT_AXES(1)))-IND(A_N(GANT_AXES(1)))-H_O(GANT_AXES(1))-H_O(GANT_AXES(0))  ! Set axis origin to the position of index = zero
		END
		
	END ! END IF HOMING=TRUE
	
	AXIS_INDEX = A_N(GANT_AXES(0))
	CALL SetLimitMasking		! SETS THE SOFT OR HARD LIMITS
	AXIS_INDEX = A_N(GANT_AXES(1))
	CALL SetLimitMasking		! SETS THE SOFT OR HARD LIMITS
	
	!!! DISABLE AXES AND SET GANTRY MODE ON, CHANGE TUNING PARAMETERS !!!
	DISABLE (A_N(GANT_AXES(0)),A_N(GANT_AXES(1)))      	! DISABLE THE AXIS
	
	MFLAGS(A_N(GANT_AXES(0))).25=1			! SET GANTRY MODE ON
	MFLAGS(A_N(GANT_AXES(1))).25=1			! SET GANTRY MODE ON

	! SET TUNING PARAMETERS FOR GANTRY MODE
	CALL TuningParametersGantry
	
	!!! RE-ENABLE AXES IN GANTRY MODE, DRIVE TO 0
	WAIT 1000
	ENABLE (A_N(GANT_AXES(0)),A_N(GANT_AXES(1)))

	HOME_FLAG(GANT_AXES(0))=1;			! SET HOME FLAG COMPLETE
	HOME_FLAG(GANT_AXES(1))=1;			! SET HOME FLAG COMPLETE
RET